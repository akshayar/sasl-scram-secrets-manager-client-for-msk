AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  BuildVersion:
    Description: Build number
    Type: String
    Default: "0.1"
  Environment:
    Description: Deploy Target
    Type: String
    Default: "dev"
  NamePrefix:
    Description: Name prefix
    Type: String
    Default: "SecretRotation"
  FileLocation:
    Description: Lambda function s3 bucket
    Type: String
  FileName:
    Description: Name of the object in s3
    Type: String
  LambdaHandler:
    Description: Lambda handler
    Type: String
    Default: "rotation-lambda.lambda_handler"
  LambdaMemoryAllocation:
    Description: Memory to be allocated to Lambda function
    Type: String
    Default: "128"
  LambdaRuntime:
    Description: Runtime of the Lambda function
    Type: String
    Default: "python3.9"
  LambdaTimeout:
    Description: Timeout threshold of the Lambda function
    Type: String
    Default: "30"
  SNSTopicName:
    Description: Name of the SNS topic for publishing rotation notifications
    Type: String
    Default: "msk-key-rotation"
  MSKArn:
    Description: MSk Arn
    Type: String

Resources:

  IAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${NamePrefix}LambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${NamePrefix}LambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "kafka:DescribeConfigurationRevision"
                  - "kafka:DescribeConfiguration"
                Resource: !Sub "arn:aws:kafka:*:${AWS::AccountId}:configuration/*/*"
              - Effect: "Allow"
                Action:
                  - "kafka:DescribeClusterV2"
                  - "kafka:ListClustersV2"
                  - "kafka:BatchAssociateScramSecret"
                  - "kafka:ListClusters"
                  - "kafka:ListScramSecrets"
                  - "kafka:DescribeCluster"
                  - "kafka:BatchDisassociateScramSecret"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecretVersionIds"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:PutSecretValue"
                  - "secretsmanager:UpdateSecret"
                  - "secretsmanager:UpdateSecretVersionStage"
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:AmazonMSK*"
              - Effect: "Allow"
                Action:
                  - "kms:Decrypt"
                  - "kms:GenerateDataKey"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action: "secretsmanager:GetRandomPassword"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource:
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopicName}"

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: IAMRole
    Properties:
      Description:
        Fn::Join:
          - ""
          - - "Build Version "
            - !Ref BuildVersion
      FunctionName: !Sub "${NamePrefix}LambdaFunction"
      Code:
        S3Bucket: !Ref FileLocation
        S3Key: !Ref FileName
      Handler: !Ref LambdaHandler
      MemorySize: !Ref LambdaMemoryAllocation
      Role:
        Fn::GetAtt:
          - IAMRole
          - 'Arn'
      Runtime: !Ref LambdaRuntime
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT: !Sub "https://secretsmanager.${AWS::Region}.amazonaws.com/"
          MSK_CLUSTER_ARN: !Sub "${MSKArn}"

  LambdaSecretsManagerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'Lambda.Arn'
      Action: "lambda:InvokeFunction"
      Principal: "secretsmanager.amazonaws.com"

Outputs:
  LambdaMSKSecretArn:
    Description: ARN for lambda key rotation
    Value: !GetAtt Lambda.Arn
    Export:
      Name:
        Fn::Sub: "${NamePrefix}${Environment}LambdaKeyRotationARN"
